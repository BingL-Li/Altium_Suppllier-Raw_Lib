name: Generate Enhanced Folder TOC
on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  generate-folder-toc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Enhanced Folder Structure
        run: |
          cat > generate_toc.py << 'EOF'
          import os
          import glob
          
          def count_files_by_type(directory):
              """Count Altium library files by type"""
              counts = {
                  'intlib': 0,    # Integrated Libraries
                  'pcblib': 0,    # Footprint Libraries  
                  'schlib': 0,    # Symbol Libraries
                  'pdf': 0        # Datasheets
              }
              
              # Count files in current directory and subdirectories
              for root, dirs, files in os.walk(directory):
                  for file in files:
                      file_lower = file.lower()
                      if file_lower.endswith('.intlib'):
                          counts['intlib'] += 1
                      elif file_lower.endswith('.pcblib'):
                          counts['pcblib'] += 1
                      elif file_lower.endswith('.schlib'):
                          counts['schlib'] += 1
                      elif file_lower.endswith('.pdf'):
                          counts['pdf'] += 1
              
              return counts
          
          def get_file_list(directory, extension):
              """Get list of files with specific extension"""
              files = []
              for root, dirs, file_list in os.walk(directory):
                  for file in file_list:
                      if file.lower().endswith(extension.lower()):
                          rel_path = os.path.relpath(os.path.join(root, file), directory)
                          files.append(file)
              return files
          
          def generate_folder_toc():
              toc = ["## üìÅ Repository Structure\n\n"]
              
              # First, generate overall statistics
              total_counts = count_files_by_type('.')
              if any(total_counts.values()):
                  toc.append("### üìä Library Summary\n")
                  if total_counts['intlib'] > 0:
                      toc.append(f"- üîó **{total_counts['intlib']}** Integrated Libraries (*.IntLib)\n")
                  if total_counts['schlib'] > 0:
                      toc.append(f"- üìê **{total_counts['schlib']}** Symbol Libraries (*.SchLib)\n")
                  if total_counts['pcblib'] > 0:
                      toc.append(f"- ü¶∂ **{total_counts['pcblib']}** Footprint Libraries (*.PcbLib)\n")
                  if total_counts['pdf'] > 0:
                      toc.append(f"- üìÑ **{total_counts['pdf']}** Datasheets (*.pdf)\n")
                  toc.append("\n")
              
              # Then generate folder structure
              toc.append("### üìÇ Folder Structure\n\n")
              
              # Get all directories
              directories = []
              for root, dirs, files in os.walk('.'):
                  # Skip .git and .github directories
                  dirs[:] = [d for d in dirs if not d.startswith('.git')]
                  
                  if root != '.':
                      directories.append(root)
              
              directories.sort()
              
              for directory in directories:
                  level = directory.count(os.sep) - 1
                  indent = '  ' * level
                  folder_name = os.path.basename(directory)
                  
                  # Count files in this specific directory (not subdirectories)
                  counts = {
                      'intlib': len([f for f in os.listdir(directory) if f.lower().endswith('.intlib') and os.path.isfile(os.path.join(directory, f))]),
                      'schlib': len([f for f in os.listdir(directory) if f.lower().endswith('.schlib') and os.path.isfile(os.path.join(directory, f))]),
                      'pcblib': len([f for f in os.listdir(directory) if f.lower().endswith('.pcblib') and os.path.isfile(os.path.join(directory, f))]),
                      'pdf': len([f for f in os.listdir(directory) if f.lower().endswith('.pdf') and os.path.isfile(os.path.join(directory, f))])
                  }
                  
                  # Create description based on file types
                  descriptions = []
                  if counts['intlib'] > 0:
                      descriptions.append(f"üîó {counts['intlib']} IntLib")
                  if counts['schlib'] > 0:
                      descriptions.append(f"üìê {counts['schlib']} SchLib")
                  if counts['pcblib'] > 0:
                      descriptions.append(f"ü¶∂ {counts['pcblib']} PcbLib")
                  if counts['pdf'] > 0:
                      descriptions.append(f"üìÑ {counts['pdf']} PDF")
                  
                  if descriptions:
                      desc = " | ".join(descriptions)
                      toc.append(f"{indent}- [üìÇ **{folder_name}**]({directory}/) - *{desc}*\n")
                  else:
                      toc.append(f"{indent}- [üìÇ {folder_name}]({directory}/)\n")
              
              # Add detailed file listings for directories with library files
              toc.append("\n### üìã Detailed File Listings\n\n")
              
              for directory in directories:
                  folder_name = os.path.basename(directory)
                  
                  # Get library files in this directory
                  intlib_files = [f for f in os.listdir(directory) if f.lower().endswith('.intlib') and os.path.isfile(os.path.join(directory, f))]
                  schlib_files = [f for f in os.listdir(directory) if f.lower().endswith('.schlib') and os.path.isfile(os.path.join(directory, f))]
                  pcblib_files = [f for f in os.listdir(directory) if f.lower().endswith('.pcblib') and os.path.isfile(os.path.join(directory, f))]
                  
                  if intlib_files or schlib_files or pcblib_files:
                      toc.append(f"#### üìÇ {folder_name}\n")
                      
                      if intlib_files:
                          toc.append("**Integrated Libraries:**\n")
                          for file in sorted(intlib_files):
                              toc.append(f"- üîó [{file}]({directory}/{file})\n")
                          toc.append("\n")
                      
                      if schlib_files:
                          toc.append("**Symbol Libraries:**\n")
                          for file in sorted(schlib_files):
                              toc.append(f"- üìê [{file}]({directory}/{file})\n")
                          toc.append("\n")
                      
                      if pcblib_files:
                          toc.append("**Footprint Libraries:**\n")
                          for file in sorted(pcblib_files):
                              toc.append(f"- ü¶∂ [{file}]({directory}/{file})\n")
                          toc.append("\n")
              
              return ''.join(toc)
          
          # Generate and save TOC
          with open('folder_toc.md', 'w') as f:
              f.write(generate_folder_toc())
          EOF
          
          python generate_toc.py

      - name: Update README
        run: |
          if grep -q "<!-- FOLDER-TOC -->" README.md; then
            # Create temporary file with new content
            awk '
            /<!-- FOLDER-TOC -->/ {print; system("cat folder_toc.md"); f=1; next}
            /<!-- \/FOLDER-TOC -->/ {f=0}
            !f {print}
            ' README.md > temp_readme.md
            mv temp_readme.md README.md
          else
            # If no markers exist, append to end
            echo "" >> README.md
            echo "<!-- FOLDER-TOC -->" >> README.md
            cat folder_toc.md >> README.md
            echo "<!-- /FOLDER-TOC -->" >> README.md
          fi

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update Altium library structure with file counts"
          git push